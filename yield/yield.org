* yield关键字
** for循环缺陷是所有数据都在内存中，生成器是可以迭代的，但是只可以读取一次
** 生成器能够迭代是因为next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常


* 理解：return一个值，且记住这个返回的位置，下次迭代就从这个位置后开始。
** 带有yield的函数不仅仅只用于for循环中，而且可用于某个函数的参数，只要这个函数的参数允许迭代参数。
*** code1
#+BEGIN_ASCII
In [3]: def fab(max):
   ...:     n,a,b = 0,0,1
   ...:     while n < max:
   ...:         print(b)
   ...:         a,b = b,a+b
   ...:         n = n + 1
   ...:

In [4]: fab(5)
1
1
2
3
5
#+END_ASCII


*** code2
#+BEGIN_ASCII
In [11]: def fab(max):
    ...:     n,a,b = 0,0,1
    ...:     L = []
    ...:     while n < max:
    ...:         L.append(b)
    ...:         a,b=b,a+b
    ...:         n=n+1
    ...:     return L
    ...:

In [12]: for x in fab(5):
    ...:     print(x)
    ...:
1
1
2
3
5
#+END_ASCII


*** code3
#+BEGIN_SRC python
class Fab(object):

    def __init__(self, max):
        self.max = max
        self.n, self.a, self.b = 0, 0, 1

    def __iter__(self):
        return self

    def next(self):
        if self.n < self.max:
            r = self.b
            self.a, self.b = self.b, self.a + self.b
            self.n = self.n + 1
            return r
        raise StopIteration()
#+END_SRC


*** code4
#+BEGIN_SRC python
def fab(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
#+END_SRC

*** code5
#+BEGIN_SRC pyton
def read_file(fpath):
    BLOCK_SIZE = 1024
    with open(fpath, 'rb') as f:
        while True:
            block = f.read(BLOCK_SIZE)
            if block:
                yield block
            else:
                return
#+END_SRC
