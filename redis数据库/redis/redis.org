* Redis数据库
** 简介
+ Nosql数据库中使用广泛的非关系型内存数据库,
+ 内部是一个key-value存储系统
+ 支持存储的value类型多,string、list、set、zset、hash

** 配置
+ redis 127.0.0.1:6379> CONFIG GET loglevel
+ redis 127.0.0.1:6379> CONFIG GET *
+ redis 127.0.0.1:6379> CONFIG SET loglevel "notice"

** 参数说明
1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程
    daemonize no
2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
    pidfile /var/run/redis.pid
3. 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能
    timeout 300
4. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
    loglevel verbose
5. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
    logfile stdout
6. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id
    databases 16
7. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
    save <seconds> <changes>
    Redis默认配置文件中提供了三个条件：
    save 900 1
    save 300 10
    save 60 10000
    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
8. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
    rdbcompression yes
9. 指定本地数据库文件名，默认值为dump.rdb
    dbfilename dump.rdb
10. 指定本地数据库存放目录
    dir ./
11. 设置当本机为slave服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步
    slaveof <masterip> <masterport>
12. 当master服务设置了密码保护时，slav服务连接master的密码
    masterauth <master-password>
13. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭
    requirepass foobared
14. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
    maxclients 128
15. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区
    maxmemory <bytes>
16. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no
    appendonly no
17. 指定更新日志文件名，默认为appendonly.aof
     appendfilename appendonly.aof
18. 指定更新日志条件，共有3个可选值：
    no：表示等操作系统进行数据缓存同步到磁盘（快）
    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）
    everysec：表示每秒同步一次（折衷，默认值）
    appendfsync everysec
19. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）
     vm-enabled no
20. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
     vm-swap-file /tmp/redis.swap
21. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
     vm-max-memory 0
22. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
     vm-page-size 32
23. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。
     vm-pages 134217728
24. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
     vm-max-threads 4
25. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
    glueoutputbuf yes
26. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
    hash-max-zipmap-entries 64
    hash-max-zipmap-value 512
27. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）
    activerehashing yes
28. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
    include /path/to/local.conf
** 数据类型
*** string
127.0.0.1:6379> SET name "test"
OK
127.0.0.1:6379> GET name
"test"
*** hash  键值对集合
127.0.0.1:6379> HMSET myhash field1 "haha" field2 "nihao"
OK
127.0.0.1:6379> HGET myhash field1
"haha"
127.0.0.1:6379> HGET myhash field2
"nihao"
*** list  字符串列表
127.0.0.1:6379> LPUSH runoob rabitmq
(integer) 3
127.0.0.1:6379> LPUSH runoob
(error) ERR wrong number of arguments for 'lpush' command
127.0.0.1:6379> LPUSH runoob 0 10
(integer) 5
127.0.0.1:6379> LPUSH runoob 6
(integer) 6
127.0.0.1:6379> LPUSH runoob 6 5
(integer) 8
127.0.0.1:6379> LRANGE runoob 0 10
1) "5"
2) "6"
3) "6"
4) "10"
5) "0"
6) "rabitmq"
7) "mongodb"
8) "redis"
*** set   string的无序集合
127.0.0.1:6379> SADD runoob redis
(error) WRONGTYPE Operation against a key holding the wrong kind of value
127.0.0.1:6379> SADD set redis
(integer) 1
127.0.0.1:6379> SADD set mongo
(integer) 1
127.0.0.1:6379> SADD set rabitmq
(integer) 1
127.0.0.1:6379> SMEMBERS set
1) "rabitmq"
2) "mongo"
3) "redis"

*** zset  string的有序集合
每个元素关联一个double类型的分数，通过分数从小到大排序
127.0.0.1:6379> ZADD zset 0 redis
(integer) 1
127.0.0.1:6379> ZADD zset 0 mongo
(integer) 1
127.0.0.1:6379> ZADD zset 0 rabitmq
(integer) 1
127.0.0.1:6379> ZADD zset 0 rabitmq
(integer) 0
127.0.0.1:6379> ZADD zset 1000 rabitmq
(integer) 0
127.0.0.1:6379> ZADD zset 1000 rabit
(integer) 1
127.0.0.1:6379> ZRANGEBYSCORE zset 0 1000
1) "mongo"
2) "redis"
3) "rabit"
4) "rabitmq"
127.0.0.1:6379> ZRANGEBYSCORE zset 0 500
1) "mongo"
2) "redis"


* Redis命令
** 键
127.0.0.1:6379> SET runoobkey redis
OK
127.0.0.1:6379> GET runookey
(nil)
127.0.0.1:6379> GET runoobkey
"redis"
127.0.0.1:6379> DEL runoobkey
(integer) 1
127.0.0.1:6379> GET runoobkey
(nil)
127.0.0.1:6379> DEL runoobkey
(integer) 0
127.0.0.1:6379> DEL runookey
(integer) 0

** 字符串
redis 127.0.0.1:6379> SET runoobkey redis
OK
redis 127.0.0.1:6379> GET runoobkey
"redis"
127.0.0.1:6379> getrange test 0 2
"red"
127.0.0.1:6379> GETRANGE test 0 2
"red"
** hash
127.0.0.1:6379>  HMSET runoobkey name "redis tutorial" description "redis basic commands for caching" likes 20 visitors 23000
OK
127.0.0.1:6379>  HGETALL runoobkey
1) "name"
2) "redis tutorial"
3) "description"
4) "redis basic commands for caching"
5) "likes"
6) "20"
7) "visitors"
8) "23000"
** list
redis 127.0.0.1:6379> LPUSH runoobkey redis
(integer) 1
redis 127.0.0.1:6379> LPUSH runoobkey mongodb
(integer) 2
redis 127.0.0.1:6379> LPUSH runoobkey mysql
(integer) 3
redis 127.0.0.1:6379> LRANGE runoobkey 0 10
1) "mysql"
2) "mongodb"
3) "redis"
** set
redis 127.0.0.1:6379> SADD runoobkey redis
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mongodb
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mysql
(integer) 1
redis 127.0.0.1:6379> SADD runoobkey mysql
(integer) 0
redis 127.0.0.1:6379> SMEMBERS runoobkey
** 有序集合
 redis 127.0.0.1:6379> ZADD runoobkey 1 redis
(integer) 1
redis 127.0.0.1:6379> ZADD runoobkey 2 mongodb
(integer) 1
redis 127.0.0.1:6379> ZADD runoobkey 3 mysql
(integer) 1
redis 127.0.0.1:6379> ZADD runoobkey 3 mysql
(integer) 0
redis 127.0.0.1:6379> ZADD runoobkey 4 mysql
(integer) 0
redis 127.0.0.1:6379> ZRANGE runoobkey 0 10 WITHSCORES
1) "redis"
2) "1"
3) "mongodb"
4) "2"
5) "mysql"
6) "4"
** HyperLogLog
什么是基数：比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5
,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。
redis 127.0.0.1:6379> PFADD runoobkey "redis"
1) (integer) 1
redis 127.0.0.1:6379> PFADD runoobkey "mongodb"
1) (integer) 1
redis 127.0.0.1:6379> PFADD runoobkey "mysql"
1) (integer) 1
redis 127.0.0.1:6379> PFCOUNT runoobkey
(integer) 3


* 发布订阅
发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息

[[file:pubsub1.png]]

[[file:pubsub2.png
]]


* 事务
- Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：
  +  批量操作在发送 EXEC 命令前被放入队列缓存。
  +  收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。
  +  在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。
- 一个事务从开始到执行会经历以下三个阶段：
  +  开始事务。
  +  命令入队。
  +  执行事务。

redis 127.0.0.1:6379> MULTI
OK

redis 127.0.0.1:6379> SET book-name "Mastering C++ in 21 days"
QUEUED

redis 127.0.0.1:6379> GET book-name
QUEUED

redis 127.0.0.1:6379> SADD tag "C++" "Programming" "Mastering Series"
QUEUED

redis 127.0.0.1:6379> SMEMBERS tag
QUEUED

redis 127.0.0.1:6379> EXEC
1) OK
2) "Mastering C++ in 21 days"
3) (integer) 3
4) 1) "Mastering Series"
   2) "C++"
   3) "Programming"





* 脚本
redis 127.0.0.1:6379> EVAL "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 key1 key2 first second

1) "key1"
2) "key2"
3) "first"
4) "second"

* 数据恢复
redis 127.0.0.1:6379> SAVE
OK


redis 127.0.0.1:6379> CONFIG GET dir
1) "dir"
2) "/usr/local/redis/bin"

127.0.0.1:6379> BGSAVE
Background saving started



* 安全
127.0.0.1:6379> CONFIG get requirepass
1) "requirepass"
2) ""

127.0.0.1:6379> CONFIG set requirepass "runoob"
OK
127.0.0.1:6379> CONFIG get requirepass
1) "requirepass"
2) "runoob"

* 管道技术
- Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：
  +  客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。
  +  服务端处理命令，并将结果返回给客户端。
- Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。


* 分区
- 分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集。

- 分区的优势
   + 通过利用多台计算机内存的和值，允许我们构造更大的数据库。
   + 通过多核和多台计算机，允许我们扩展计算能力；通过多台计算机和网络适配器，允许我们扩展网络带宽。

- 分区的不足
   +  涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上时，你就不能对这两个set执行交集操作。
   +  涉及多个key的redis事务不能使用。
   +  当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件。
   +  增加或删除容量也比较复杂。redis集群大多数支持在运行时增加、删除节点的透明数据平衡的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性。然而，一种叫做presharding的技术对此是有帮助的。


- 分区类型
   + 范围分区：最简单的分区方式是按范围分区，就是映射一定范围的对象到特定的Redis实例。
     -  比如，ID从0到10000的用户会保存到实例R0，ID从10001到 20000的用户会保存到R1，以此类推。
     -  这种方式是可行的，并且在实际中使用，不足就是要有一个区间范围到实例的映射表。
     -  这个表要被管理，同时还需要各 种对象的映射表，通常对Redis来说并非是好的方法。
   + 哈希分区：另外一种分区方法是hash分区。这对任何key都适用，也无需是object_name:这种形式，像下面描述的一样简单：
     - 用一个hash函数将key转换为一个数字，比如使用crc32 hash函数。对key foobar执行crc32(foobar)会输出类似93024922的整数。
    -  对这个整数取模，将其转化为0-3之间的数字，就可以将这个整数映射到4个Redis实例中的一个了。93024922 % 4 = 2，就是说key foobar应该被存到R2实例中。注意：取模操作是取除的余数，通常在多种编程语言中用%操作符实现。
